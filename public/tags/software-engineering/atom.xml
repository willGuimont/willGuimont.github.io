<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>William Guimont-Martin - Software Engineering</title>
    <subtitle>William Guimont-Martin&#x27;s personal website</subtitle>
    <link rel="self" type="application/atom+xml" href="https://willguimont.com/tags/software-engineering/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://willguimont.com/"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-09-05T00:00:00+00:00</updated>
    <id>https://willguimont.com/tags/software-engineering/atom.xml</id>
    <entry xml:lang="en">
        <title>Atelier Bash et Docker</title>
        <published>2023-09-05T00:00:00+00:00</published>
        <updated>2023-09-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            William Guimont-Martin
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willguimont.com/blog/bash-docker/"/>
        <id>https://willguimont.com/blog/bash-docker/</id>
        
        <content type="html" xml:base="https://willguimont.com/blog/bash-docker/">&lt;p&gt;Ces ateliers ont été conçus pour le département d’informatique et de génie logiciel de l’Université Laval.
Ils ont été donnés dans le cadre du cours IFT-2001 et GLO-2001 Systèmes d’exploitation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;atelier-d-introduction-a-bash&quot;&gt;Atelier d’introduction à Bash&lt;&#x2F;h2&gt;
&lt;p&gt;Ce premier atelier a pour but de vous familiariser avec le terminal et le langage de script Bash.
Vous apprendrez à utiliser les commandes de base de Bash et à écrire des scripts simples.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;AtelierBash.pdf&quot; target=&quot;_blank&quot;&gt;Énoncé Bash&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;AtelierBashSolutionnaire.pdf&quot; target=&quot;_blank&quot;&gt;Solutionnaire Bash&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a class=&quot;external&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ulavalIFTGLOateliers&#x2F;IFT2001-Scripting&quot; target=&quot;_blank&quot;&gt;Code source&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;atelier-d-introduction-a-docker&quot;&gt;Atelier d’introduction à Docker&lt;&#x2F;h2&gt;
&lt;p&gt;Ce deuxième atelier a pour but de vous familiariser avec Docker.
Vous apprendrez à utiliser les commandes de base de Docker et à écrire des Dockerfile.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;AtelierDocker.pdf&quot; target=&quot;_blank&quot;&gt;Énoncé Docker&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;AtelierDockerSolutionnaire.pdf&quot; target=&quot;_blank&quot;&gt;Solutionnaire Docker&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a class=&quot;external&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ulavalIFTGLOateliers&#x2F;IFT2001-Docker&quot; target=&quot;_blank&quot;&gt;Code source&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Dashy Dango</title>
        <published>2022-08-01T00:00:00+00:00</published>
        <updated>2022-08-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            William Guimont-Martin
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willguimont.com/blog/dashy-dango/"/>
        <id>https://willguimont.com/blog/dashy-dango/</id>
        
        <content type="html" xml:base="https://willguimont.com/blog/dashy-dango/">&lt;p&gt;Dashy Dango a wave fighting game made with &lt;a class=&quot;external&quot; href=&quot;https:&#x2F;&#x2F;wasm4.org&#x2F;&quot; target=&quot;_blank&quot;&gt;WASM-4&lt;&#x2F;a&gt; by &lt;a class=&quot;external&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;samX500&quot; target=&quot;_blank&quot;&gt;@samX500&lt;&#x2F;a&gt; and &lt;a class=&quot;external&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;willGuimont&quot; target=&quot;_blank&quot;&gt;@willGuimont&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a class=&quot;external&quot; href=&quot;https:&#x2F;&#x2F;willguimont.github.io&#x2F;dashy-dango&#x2F;&quot; target=&quot;_blank&quot;&gt;Try the game here&lt;&#x2F;a&gt; or on &lt;a class=&quot;external&quot; href=&quot;https:&#x2F;&#x2F;willguimont.itch.io&#x2F;dashy-dango&quot; target=&quot;_blank&quot;&gt;itch.io&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willguimont.com&#x2F;blog&#x2F;dashy-dango&#x2F;DashyDangolong.png&quot; alt=&quot;dash dango&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Source code is here: &lt;a class=&quot;external&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;willGuimont&#x2F;dashy-dango&quot; target=&quot;_blank&quot;&gt;willGuimont&#x2F;dashy-dango&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We built our own ECS (entity-component-systems) from scratch in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;More screenshots:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;willguimont.com&#x2F;blog&#x2F;dashy-dango&#x2F;dashy_1.png&quot; alt=&quot;screenshot 1&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;willguimont.com&#x2F;blog&#x2F;dashy-dango&#x2F;dashy_2.png&quot; alt=&quot;screenshot 2&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;willguimont.com&#x2F;blog&#x2F;dashy-dango&#x2F;dashy_3.png&quot; alt=&quot;screenshot 3&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Les tests en pratique</title>
        <published>2022-03-14T00:00:00+00:00</published>
        <updated>2022-03-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            William Guimont-Martin
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willguimont.com/blog/tests-en-pratique/"/>
        <id>https://willguimont.com/blog/tests-en-pratique/</id>
        
        <content type="html" xml:base="https://willguimont.com/blog/tests-en-pratique/">&lt;p&gt;Tester, ce n’est pas seulement s’assurer que le code « marche ». C’est une démarche structurée pour réduire l’incertitude, détecter les erreurs tôt et donner confiance dans le système. Trop souvent, les tests sont vus comme une contrainte ou un ajout après coup. En pratique, bien utilisés, ils deviennent un outil de conception, de documentation et de robustesse.&lt;&#x2F;p&gt;
&lt;p&gt;Ces slides présentent une approche concrète : les différents niveaux de tests (unitaires, intégration, système, acceptation), leurs rôles respectifs et les pièges fréquents. On y retrouve aussi des principes simples : un test doit être automatisé, indépendant et binaire. Il doit rester lisible, rapide et maintenable.&lt;&#x2F;p&gt;
&lt;p&gt;À travers l’exemple d’UTournament, nous verrons comment structurer un test (Arrange-Act-Assert), comment limiter la fragilité et comment élargir la portée avec des approches comme le property-based testing. L’objectif est de montrer qu’avec un minimum de rigueur, les tests deviennent un allié au développement plutôt qu’un fardeau.&lt;&#x2F;p&gt;
&lt;p&gt;Slides: &lt;a href=&quot;LesTestsEnPratique.pdf&quot; target=&quot;_blank&quot;&gt;Les tests en pratique&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Rolly Dango</title>
        <published>2022-01-17T00:00:00+00:00</published>
        <updated>2022-01-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            William Guimont-Martin
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willguimont.com/blog/rolly-dango/"/>
        <id>https://willguimont.com/blog/rolly-dango/</id>
        
        <content type="html" xml:base="https://willguimont.com/blog/rolly-dango/">&lt;p&gt;Rolly Dango, an isometric rolling puzzle made with &lt;a class=&quot;external&quot; href=&quot;https:&#x2F;&#x2F;wasm4.org&#x2F;&quot; target=&quot;_blank&quot;&gt;WASM-4&lt;&#x2F;a&gt;. We made it for the &lt;a class=&quot;external&quot; href=&quot;https:&#x2F;&#x2F;itch.io&#x2F;jam&#x2F;wasm4&quot; target=&quot;_blank&quot;&gt;WASM-4 Game Jam&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a class=&quot;external&quot; href=&quot;https:&#x2F;&#x2F;willguimont.github.io&#x2F;rolly-dango&#x2F;&quot; target=&quot;_blank&quot;&gt;Try the game here&lt;&#x2F;a&gt; or on &lt;a class=&quot;external&quot; href=&quot;https:&#x2F;&#x2F;willguimont.itch.io&#x2F;rolly-dango&quot; target=&quot;_blank&quot;&gt;itch.io&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;willGuimont&#x2F;rolly-dango&#x2F;main&#x2F;assets&#x2F;game.png&quot; alt=&quot;rolly dango&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Source code is here: &lt;a class=&quot;external&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;willGuimont&#x2F;rolly-dango&quot; target=&quot;_blank&quot;&gt;willGuimont&#x2F;rolly-dango&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here’s some key points of our project:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We made our own ECS (entity-component-systems) from scratch&lt;&#x2F;li&gt;
&lt;li&gt;To save cartridge space, we built our own Huffman coding algorithm&lt;&#x2F;li&gt;
&lt;li&gt;To help ourselves make levels, we built our own level editor using &lt;a class=&quot;external&quot; href=&quot;https:&#x2F;&#x2F;p5js.org&#x2F;&quot; target=&quot;_blank&quot;&gt;p5.js&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Made all of our sprites using &lt;a class=&quot;external&quot; href=&quot;https:&#x2F;&#x2F;www.aseprite.org&#x2F;&quot; target=&quot;_blank&quot;&gt;Aseprite&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Our level editor:
&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;willGuimont&#x2F;rolly-dango&#x2F;main&#x2F;assets&#x2F;editor.png&quot; alt=&quot;level editor&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Inward and Outward Polymorphism</title>
        <published>2020-07-09T00:00:00+00:00</published>
        <updated>2020-07-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            William Guimont-Martin
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://willguimont.com/blog/polymorphism/"/>
        <id>https://willguimont.com/blog/polymorphism/</id>
        
        <content type="html" xml:base="https://willguimont.com/blog/polymorphism/">&lt;p&gt;I’ve recently become fond of Algebraic Data Types (ADT).&lt;&#x2F;p&gt;
&lt;p&gt;Languages like Haskell and Rust allows you to model your domain in a concise way using ADT. What would take several classes (and files) in Java (Interface-Oriented Programming (IOP)) can be expressed in a couple of lines. This got me thinking about software architecture using those two.&lt;&#x2F;p&gt;
&lt;p&gt;Both IOP and ADT have advantages and disadvantages.&lt;&#x2F;p&gt;
&lt;p&gt;ADT is a lot more concise but requires to use pattern-matching. Adding a new ADT type would then mean that you’ll have to add a case to every function matching on the type. Whereas adding a new function acting on an ADT is easy, you simply need to write the function.&lt;&#x2F;p&gt;
&lt;p&gt;For IOP on the other hand, adding a new implementation of the interface is easy. You simply implement the needed methods. Whereas adding a new function in the interface can quickly become expensive, you’ll have to add the method to every class implementing the interface. I’ll include Haskell’s type-classes and Rust’s traits as IOP.&lt;&#x2F;p&gt;
&lt;p&gt;I discussed that compromise a bit more in &lt;a href=&quot;https:&#x2F;&#x2F;willguimont.com&#x2F;blog&#x2F;abstract-data-type&#x2F;&quot;&gt;a previous post on abstract data types&lt;&#x2F;a&gt;. Albeit about a different type of ADT (algebraic vs abstract), the post is still relevant to understand the difference between ADT and IOP.&lt;&#x2F;p&gt;
&lt;p&gt;Here, I would like to discuss the software engineering aspect of using IOP and ADT when designing modules. I’ll introduce the concept of inward and outward polymorphism.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;motivation&quot;&gt;Motivation&lt;&#x2F;h1&gt;
&lt;p&gt;To motivate the introduction of those concepts, let’s start with two small examples.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;algebraic-data-type&quot;&gt;Algebraic Data Type&lt;&#x2F;h2&gt;
&lt;p&gt;You are charged to build a networking library in Rust. You want to support both IPv4 and IPv6. Each one represents addresses in different ways, IPv4 stores address using four 8 bits numbers, while IPv6 stores it as a string. Using Rust, and having recently read the &lt;a class=&quot;external&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch06-01-defining-an-enum.html&quot; target=&quot;_blank&quot;&gt;Rust Book’s chapter on enums&lt;&#x2F;a&gt;, you decide to declare them the following way:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-enum z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-enum z-rust&quot;&gt;enum&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-enum z-rust&quot;&gt;IpAddr&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-enum z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-constant z-other z-rust&quot;&gt;V4&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;u8&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-enum z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-constant z-other z-rust&quot;&gt;V6&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;String&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-enum z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The user will call your functions, like &lt;code&gt;connect_to(ip: IpAddr)&lt;&#x2F;code&gt;, using the polymorphic nature of &lt;code&gt;IpAddr&lt;&#x2F;code&gt; to use either IPv4 or IPv6.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;interface-oriented-programming&quot;&gt;Interface-Oriented Programming&lt;&#x2F;h2&gt;
&lt;p&gt;The next day, you are writing Java (poor you). You have to implement an application that provides support for plugins. So, you make an interface and write your code calling that interface. The user can then implement your interface with their code, and you can call their class since it implements your interface.&lt;&#x2F;p&gt;
&lt;p&gt;So, your library calls the user’s code polymorphically.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;inward-or-outward&quot;&gt;Inward or Outward&lt;&#x2F;h2&gt;
&lt;p&gt;In the last two examples, we can see two different uses of polymorphism. In the first example, the user called your library passing polymorphic data type, while the second one, the user implemented an interface so that your library would call their code.&lt;&#x2F;p&gt;
&lt;p&gt;We can see that the flow of control is different in both cases. In the first example, the flow moves &lt;strong&gt;into&lt;&#x2F;strong&gt; your code whereas, in the other example, the flow moves &lt;strong&gt;out of&lt;&#x2F;strong&gt; your code.&lt;&#x2F;p&gt;
&lt;p&gt;Based on the control flow, we can define &lt;strong&gt;inward polymorphism&lt;&#x2F;strong&gt; as polymorphism used when the user calls your code. &lt;strong&gt;Outward polymorphism&lt;&#x2F;strong&gt; would then be the use of polymorphism when your code is expected to call the user’s code.&lt;&#x2F;p&gt;
&lt;p&gt;The examples were about libraries, but the same concept of inward or outward can be applied to modules.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;adt-or-iop&quot;&gt;ADT or IOP&lt;&#x2F;h1&gt;
&lt;p&gt;Inward and outward polymorphism impose different types of constraints.&lt;&#x2F;p&gt;
&lt;p&gt;When I need to write inward polymorphic code, I like to use the expressiveness of ADT. This can make the code elegant and concise.&lt;&#x2F;p&gt;
&lt;p&gt;For outward polymorphism, you have to use IOP, so that both your module and the user’s code can communicate using a common interface.&lt;&#x2F;p&gt;
&lt;p&gt;The choice between ADT and IOP can be really difficult and, as always, there is no &lt;em&gt;apply to all solutions&lt;&#x2F;em&gt; in software architecture. The only real answer you’ll receive is “it depends”.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
